library(tidyverse)
library(rebus)
sample_ID = "https://apps.expediapartnercentral.com/lodging/search-sort-factors?propertyId=22418177"
?str_match
ID_pattern = "propertyId=" %R% one_or_more(DIGIT)
str_match(sample_ID,ID_pattern)
extracted_ID <- str_match(sample_ID,ID_pattern)
extracted_ID <- sample_ID %>%
str_match(ID_pattern) %>%
str_replace("propertyId=","")
extract_propertyId <- function(ID){
ID_pattern = "propertyId=" %R% one_or_more(DIGIT)
extracted_ID <- ID %>%
str_match(ID_pattern) %>%
str_replace("propertyId=","")
return(extracted_ID)
}
extract_propertyId(sample_ID)
sample_propertyId = "https://apps.expediapartnercentral.com/lodging/search-sort-factors?propertyId=22418177"
sample_propertyId = "https://apps.expediapartnercentral.com/supply/search-sort-factors?propertyId=25289&pwaDialog=rh3gq"
extract_propertyId(sample_ID)
extract_propertyId(property_Id)
extract_propertyId(sample_propertyId)
sample_htid = "https://apps.expediapartnercentral.com/lodging/search-sort-factors?utm_term=na&utm_campaign=mid_5263&htid=17289082&utm_medium=partner_extranet&utm_content=pcnotification&utm_source=pc-discovery_card"
sample_propertyId = "https://apps.expediapartnercentral.com/supply/search-sort-factors?propertyId=25289&pwaDialog=rh3gq"
sample_htid = "https://apps.expediapartnercentral.com/lodging/search-sort-factors?utm_term=na&utm_campaign=mid_5263&htid=17289082&utm_medium=partner_extranet&utm_content=pcnotification&utm_source=pc-discovery_card"
extract_propertyId <- function(ID, ID_type){
ID_pattern = ID_type %R% one_or_more(DIGIT)
extracted_ID <- ID %>%
str_match(ID_pattern) %>%
str_replace(ID_type,"")
return(extracted_ID)
}
extract_propertyId(sample_propertyId, "propertyId=")
extract_propertyId(sample_htid, "htid=")
if(str_detect(sample_propertyId,"propertyId")){
extract_Id(sample_propertyId,"propertyId=")
} else extract_Id(sample_propertyId,"htid=")
extract_Id <- function(ID, ID_type){
ID_pattern = ID_type %R% one_or_more(DIGIT)
extracted_ID <- ID %>%
str_match(ID_pattern) %>%
str_replace(ID_type,"")
return(extracted_ID)
}
if(str_detect(sample_propertyId,"propertyId")){
extract_Id(sample_propertyId,"propertyId=")
} else extract_Id(sample_propertyId,"htid=")
if(str_detect(sample_htid,"propertyId")){
extract_Id(sample_htid,"propertyId=")
} else extract_Id(sample_htid,"htid=")
setwd("C:/Users/vmurphy/OneDrive - Expedia Group/R Scripts/extract ID")
#
#Read csv
#Goal: From CurrentPg extract ID
#For each row in dataframe
#   If contains PropertyId
#     Extract number after "PropertyId=" until you reach a non-number
#   Else if contains htid
#     Extract number after "htid=" until you reach an ampersand
#   Put into table (dataframe) with column Hotel ID, maintaining order of column
setwd("C:/Users/vmurphy/OneDrive - Expedia Group/R Scripts/extract ID")
URL.df <- read_csv("URLs.csv")
IDs.df <- URL.df %>%
rowwise() %>%
mutate(ID_type = ifelse(str_match("propertyId"), "propertyId=", "htid="))
IDs.df <- URL.df %>%
rowwise() %>%
mutate(ID_type = ifelse(URL,str_match("propertyId"), "propertyId=", "htid="))
URL.df$ID_type <- ifelse(URL.df$URL,str_match("propertyId"), "propertyId=", "htid="))
URL.df$ID_type <- ifelse(URL.df$URL,str_match("propertyId"), "propertyId=", "htid=")
URL.df$ID_type <- ifelse(str_match(URL.df$URL,"propertyId"), "propertyId=", "htid=")
View(URL.df)
URL.df[1]
URL.df[,1]
URL.df[1][1]
test <- str_match(sample_propertyId)
test <- str_match(sample_propertyId, "propertyId")
URL.df$ID_type <- ifelse(str_detect(URL.df$URL,"propertyId"), "propertyId=", "htid=")
View(URL.df)
####Define functions
extract_Id <- function(URL, ID_type){
ID_pattern = ID_type %R% one_or_more(DIGIT)
extracted_ID <- URL %>%
str_match(ID_pattern) %>%
str_replace(ID_type,"")
return(extracted_ID)
}
extract_Id(sample_htid)
extract_Id(sample_htid, "htid=")
URL.df$ID <- extract_Id(URL.df$URL,URL.df$ID_type)
View(URL.df)
View(URL.df)
####Create output
write_csv(URL.df, "Hotel ID numbers.csv")
setwd("C:/Users/vmurphy/OneDrive - Expedia Group/R Scripts/UX-scripts/Data_cleaning/extract_ID_from_URL")
library(tidyverse)
library(rebus)
####Define functions
#Function returns the ID number extracted from the URL
#Inputs are the URL and then either "propertyID=" or "htid=" as the ID_Type
extract_Id <- function(URL, ID_type){
#Define regex that will be matched
#The id is always the ID_type followed by a series of no.s
ID_pattern = ID_type %R% one_or_more(DIGIT)
extracted_ID <- URL %>%
#Extract a string that includes the ID type
str_match(ID_pattern) %>%
#Remove the ID type to just leave the ID no.
str_replace(ID_type,"")
return(extracted_ID)
}
####Read data
URL.df <- read_csv("sample_input.csv")
####Add columns
#Add a column with a string for that is the ID_Type
URL.df$ID_type <- ifelse(str_detect(URL.df$URL,"propertyId"), "propertyId=", "htid=")
#Use the extract_Id function to populate a column with the ID
URL.df$ID <- extract_Id(URL.df$URL,URL.df$ID_type)
####Create output
write_csv(URL.df, "sample_output.csv")
library(tidyverse)
library(rebus)
extract_info <- function(URL, key){
#Define regex that will be matched
#The key is always the ID_type followed by a series of no.s
ID_pattern = key %R% one_or_more(DIGIT)
extracted_ID <- URL %>%
#Extract a string that includes the ID type
str_match(ID_pattern) %>%
#Remove the ID type to just leave the ID no.
str_replace(key,"")
return(extracted_ID)
}
####Read data
URL.df <- read_csv("sample_input.csv")
#Use the extract_Id function to populate a column with the ID
URL.df$ID <- extract_Id(URL.df$URL, "regionId")
#Use the extract_Id function to populate a column with the ID
URL.df$ID <- extract_info(URL.df$URL, "regionId")
####Create output
write_csv(URL.df, "sample_output.csv")
ID_pattern = key %R% one_or_more(DIGIT)
ID_pattern = "regionId" %R% one_or_more(DIGIT)
URL.df[1]
URL.df[1][1]
URL.df[[1]
]
URL.df[1][1]
URL.df[1]
URL.df[,:1]
URL.df[.:1]
URL.df[1:1]
URL.df[1,1]
test <- str_match(URL.df[1,1],ID_pattern)
View(test)
View(test)
str_match("https://uk.hotels.com/Hotel-Search?adults=2&d1=2023-04-13&d2=2023-04-23&destination=Tokyo%2C%20Tokyo%20Prefecture%2C%20Japan&endDate=2023-04-23&latLong=35.681143%2C139.767208&regionId=3593&selected=&semdtl=&sort=RECOMMENDED&startDate=2023-04-13&theme=&useRewards=false&userIntent=", "regionId")
str_match("https://uk.hotels.com/Hotel-Search?adults=2&d1=2023-04-13&d2=2023-04-23&destination=Tokyo%2C%20Tokyo%20Prefecture%2C%20Japan&endDate=2023-04-23&latLong=35.681143%2C139.767208&regionId=3593&selected=&semdtl=&sort=RECOMMENDED&startDate=2023-04-13&theme=&useRewards=false&userIntent=", ID_pattern)
ID_pattern = "regionId=" %R% one_or_more(DIGIT)
test <- str_match(URL.df[1,1],ID_pattern)
library(tidyverse)
library(rebus)
extract_info <- function(URL, key){
#Define regex that will be matched
#The key is always the ID_type followed by a series of no.s
ID_pattern = key %R% one_or_more(DIGIT)
extracted_ID <- URL %>%
#Extract a string that includes the ID type
str_match(ID_pattern) %>%
#Remove the ID type to just leave the ID no.
str_replace(key,"")
return(extracted_ID)
}
####Read data
URL.df <- read_csv("sample_input.csv")
#Use the extract_Id function to populate a column with the ID
URL.df$ID <- extract_info(URL.df$URL, "regionId=")
####Create output
write_csv(URL.df, "sample_output.csv")
####Create output
write_csv(URL.df, "sample_output.csv")
####Create output
write_csv(URL.df, "sample_output.csv")
library(tidyverse)
library(rebus)
####Define functions
#Function returns the ID number extracted from the URL
#Inputs are the URL and then a "key" that indicates the information you want, e.g.,
extract_info <- function(URL, key){
#Define regex that will be matched
#The key is always the ID_type followed by a series of no.s
ID_pattern = key %R% one_or_more(DIGIT)
extracted_ID <- URL %>%
#Extract a string that includes the ID type
str_match(ID_pattern) %>%
#Remove the ID type to just leave the ID no.
str_replace(key,"")
return(extracted_ID)
}
####Read data
URL.df <- read_csv("sample_input.csv")
#Use the extract_Id function to populate a column with the ID
URL.df$Region_ID <- extract_info(URL.df$URL, "regionId=")
####Create output
write_csv(URL.df, "sample_output.csv")
